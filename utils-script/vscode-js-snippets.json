{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Turbo import": {
		"scope": "plaintext",
		"prefix": "myturboimport",
		"body": "import { } from '$1';",
		"description": "description",
	},
	"Turbo comment public": {
		"scope": "plaintext",
		"prefix": "myturbologpublic",
		"body": "// === PUBLIC === //",
		"description": "description",
	},
	"Turbo comment private": {
		"scope": "plaintext",
		"prefix": "myturbologprivate",
		"body": "// === PRIVATE === //",
		"description": "description",
	},
	"Turbo log console": {
		"scope": "plaintext",
		"prefix": "myturbologconsole",
		"body": "console.log('Class -> function ->')",
		"description": "description",
	},
	"Turbo service": {
		"scope": "plaintext",
		"prefix": "myturboservice",
		"body": "private readonly destroyed$$: Subject<void> = new Subject();private readonly connected$$: BehaviorSubject<AppNetwork> = new BehaviorSubject({ isOnline: false });private readonly connected$: Observable<AppNetwork> = this.connected$$.asObservable()",
		"description": "description",
	},
	"Turbo destroy": {
		"scope": "plaintext",
		"prefix": "myturbodestroy",
		"body": "ngOnDestroy() { this.destroyed$$.next();this.destroyed$$.complete(); }",
		"description": "description",
	},
	"Tap multiline": {
		"prefix": "mytapmultiline",
		"description": "Tap multiline",
		"body": [
		"tap((x$0) => {",
		"",
		"}),"
		]
	},
	"Tap pipe inline": {
		"prefix": "mytappipeinline",
		"description": "Tap pipe inline",
		"body": [
		".pipe(tap((x) => { console.log('ðŸš€ ~ TapInline $0', x); }))"
		]
	},
	"Tap inline": {
		"prefix": "mytapinline",
		"description": "Tap inline",
		"body": [
		"tap((x) => { console.log('ðŸš€ ~ TapInline $0', x); })"
		]
	},
	"Jest it inline": {
		"prefix": "myjestitinline",
		"description": "Jest it inline",
		"body": [
		"it('should return ok', () => {",
		"  expect(myFunction('test')).toEqual('ok');",
		"});",
		],
	},
	"Jest it subscribe": {
		"prefix": "myjestitsubscribe",
		"description": "Jest it subscribe",
		"body": [
		"it('should return ok', (done) => {",
		"  service.obs$.subscribe((data) => {",
		"    expect(data).toEqual('ok');",
		"    done();",
		"  });",
		"});",
		],
	},
	"Jest describe inline": {
		"prefix": "myjestdescinline",
		"description": "Jest describe inline",
		"body": [
		"describe('myFunction', () => {",
		"  it('should return ok', () => {",
		"    expect(myFunction('test')).toEqual('ok');",
		"  });",
		"});"
		]
	},
	"Jest describe each": {
		"prefix": "myjestdesceach",
		"description": "Jest describe each",
		"body": [
		"describe.each`",
		"  source  | expectedResult",
		"  ${'test'} | ${'ok'}",
		"`(`Verify if myFunction with $source`,",
		"({ source, expectedResult }) => {",
		"  test(`returns ${expectedResult}`, () => {",
		"    expect(myFunction(source)).toEqual(expectedResult);",
		"  });",
		"});"
		]
	}
}

